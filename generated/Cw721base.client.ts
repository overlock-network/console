/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
/* eslint-disable */
import {
  CosmWasmClient,
  SigningCosmWasmClient,
  ExecuteResult,
} from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {
  Action,
  Expiration,
  Binary,
  CollectionInfoMsgForNullable_CollectionExtensionMsgForRoyaltyInfoResponse,
  Empty,
  Coin,
  CollectionExtensionForRoyaltyInfo,
  AllNftInfoResponseForNullable_Empty,
  OwnerOfResponse,
  NftInfoResponseForNullable_Empty,
  OperatorsResponse,
  TokensResponse,
  ApprovalResponse,
  ApprovalsResponse,
  CollectionInfoAndExtensionResponseForNullable_CollectionExtensionForRoyaltyInfo,
  Null,
  AllInfoResponse,
  ArrayOfAttribute,
  ConfigResponseForNullable_CollectionExtensionForRoyaltyInfo,
  OwnershipForAddr,
  NullableNftInfoResponseForNullable_Empty,
  NullableString,
  MinterResponse,
  NumTokensResponse,
  OperatorResponse,
} from "./Cw721base.types";
export interface Cw721baseReadOnlyInterface {
  contractAddress: string;
  ownerOf: ({
    includeExpired,
    tokenId,
  }: {
    includeExpired?: boolean;
    tokenId: string;
  }) => Promise<OwnerOfResponse>;
  approval: ({
    includeExpired,
    spender,
    tokenId,
  }: {
    includeExpired?: boolean;
    spender: string;
    tokenId: string;
  }) => Promise<ApprovalResponse>;
  approvals: ({
    includeExpired,
    tokenId,
  }: {
    includeExpired?: boolean;
    tokenId: string;
  }) => Promise<ApprovalsResponse>;
  operator: ({
    includeExpired,
    operator,
    owner,
  }: {
    includeExpired?: boolean;
    operator: string;
    owner: string;
  }) => Promise<OperatorResponse>;
  allOperators: ({
    includeExpired,
    limit,
    owner,
    startAfter,
  }: {
    includeExpired?: boolean;
    limit?: number;
    owner: string;
    startAfter?: string;
  }) => Promise<OperatorsResponse>;
  numTokens: () => Promise<NumTokensResponse>;
  contractInfo: () => Promise<CollectionInfoAndExtensionResponseForNullable_CollectionExtensionForRoyaltyInfo>;
  getConfig: () => Promise<ConfigResponseForNullable_CollectionExtensionForRoyaltyInfo>;
  getCollectionInfoAndExtension: () => Promise<CollectionInfoAndExtensionResponseForNullable_CollectionExtensionForRoyaltyInfo>;
  getAllInfo: () => Promise<AllInfoResponse>;
  getCollectionExtensionAttributes: () => Promise<ArrayOfAttribute>;
  ownership: () => Promise<OwnershipForAddr>;
  minter: () => Promise<MinterResponse>;
  getMinterOwnership: () => Promise<OwnershipForAddr>;
  getCreatorOwnership: () => Promise<OwnershipForAddr>;
  nftInfo: ({
    tokenId,
  }: {
    tokenId: string;
  }) => Promise<NftInfoResponseForNullable_Empty>;
  getNftByExtension: ({
    extension,
    limit,
    startAfter,
  }: {
    extension?: Empty;
    limit?: number;
    startAfter?: string;
  }) => Promise<NullableNftInfoResponseForNullable_Empty>;
  allNftInfo: ({
    includeExpired,
    tokenId,
  }: {
    includeExpired?: boolean;
    tokenId: string;
  }) => Promise<AllNftInfoResponseForNullable_Empty>;
  tokens: ({
    limit,
    owner,
    startAfter,
  }: {
    limit?: number;
    owner: string;
    startAfter?: string;
  }) => Promise<TokensResponse>;
  allTokens: ({
    limit,
    startAfter,
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<TokensResponse>;
  extension: ({ msg }: { msg: Empty }) => Promise<Null>;
  getCollectionExtension: ({
    msg,
  }: {
    msg?: CollectionExtensionForRoyaltyInfo;
  }) => Promise<Null>;
  getWithdrawAddress: () => Promise<NullableString>;
}
export class Cw721baseQueryClient implements Cw721baseReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.ownerOf = this.ownerOf.bind(this);
    this.approval = this.approval.bind(this);
    this.approvals = this.approvals.bind(this);
    this.operator = this.operator.bind(this);
    this.allOperators = this.allOperators.bind(this);
    this.numTokens = this.numTokens.bind(this);
    this.contractInfo = this.contractInfo.bind(this);
    this.getConfig = this.getConfig.bind(this);
    this.getCollectionInfoAndExtension =
      this.getCollectionInfoAndExtension.bind(this);
    this.getAllInfo = this.getAllInfo.bind(this);
    this.getCollectionExtensionAttributes =
      this.getCollectionExtensionAttributes.bind(this);
    this.ownership = this.ownership.bind(this);
    this.minter = this.minter.bind(this);
    this.getMinterOwnership = this.getMinterOwnership.bind(this);
    this.getCreatorOwnership = this.getCreatorOwnership.bind(this);
    this.nftInfo = this.nftInfo.bind(this);
    this.getNftByExtension = this.getNftByExtension.bind(this);
    this.allNftInfo = this.allNftInfo.bind(this);
    this.tokens = this.tokens.bind(this);
    this.allTokens = this.allTokens.bind(this);
    this.extension = this.extension.bind(this);
    this.getCollectionExtension = this.getCollectionExtension.bind(this);
    this.getWithdrawAddress = this.getWithdrawAddress.bind(this);
  }
  ownerOf = async ({
    includeExpired,
    tokenId,
  }: {
    includeExpired?: boolean;
    tokenId: string;
  }): Promise<OwnerOfResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      owner_of: {
        include_expired: includeExpired,
        token_id: tokenId,
      },
    });
  };
  approval = async ({
    includeExpired,
    spender,
    tokenId,
  }: {
    includeExpired?: boolean;
    spender: string;
    tokenId: string;
  }): Promise<ApprovalResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      approval: {
        include_expired: includeExpired,
        spender,
        token_id: tokenId,
      },
    });
  };
  approvals = async ({
    includeExpired,
    tokenId,
  }: {
    includeExpired?: boolean;
    tokenId: string;
  }): Promise<ApprovalsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      approvals: {
        include_expired: includeExpired,
        token_id: tokenId,
      },
    });
  };
  operator = async ({
    includeExpired,
    operator,
    owner,
  }: {
    includeExpired?: boolean;
    operator: string;
    owner: string;
  }): Promise<OperatorResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      operator: {
        include_expired: includeExpired,
        operator,
        owner,
      },
    });
  };
  allOperators = async ({
    includeExpired,
    limit,
    owner,
    startAfter,
  }: {
    includeExpired?: boolean;
    limit?: number;
    owner: string;
    startAfter?: string;
  }): Promise<OperatorsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_operators: {
        include_expired: includeExpired,
        limit,
        owner,
        start_after: startAfter,
      },
    });
  };
  numTokens = async (): Promise<NumTokensResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      num_tokens: {},
    });
  };
  contractInfo =
    async (): Promise<CollectionInfoAndExtensionResponseForNullable_CollectionExtensionForRoyaltyInfo> => {
      return this.client.queryContractSmart(this.contractAddress, {
        contract_info: {},
      });
    };
  getConfig =
    async (): Promise<ConfigResponseForNullable_CollectionExtensionForRoyaltyInfo> => {
      return this.client.queryContractSmart(this.contractAddress, {
        get_config: {},
      });
    };
  getCollectionInfoAndExtension =
    async (): Promise<CollectionInfoAndExtensionResponseForNullable_CollectionExtensionForRoyaltyInfo> => {
      return this.client.queryContractSmart(this.contractAddress, {
        get_collection_info_and_extension: {},
      });
    };
  getAllInfo = async (): Promise<AllInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_all_info: {},
    });
  };
  getCollectionExtensionAttributes = async (): Promise<ArrayOfAttribute> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_collection_extension_attributes: {},
    });
  };
  ownership = async (): Promise<OwnershipForAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ownership: {},
    });
  };
  minter = async (): Promise<MinterResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      minter: {},
    });
  };
  getMinterOwnership = async (): Promise<OwnershipForAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_minter_ownership: {},
    });
  };
  getCreatorOwnership = async (): Promise<OwnershipForAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_creator_ownership: {},
    });
  };
  nftInfo = async ({
    tokenId,
  }: {
    tokenId: string;
  }): Promise<NftInfoResponseForNullable_Empty> => {
    return this.client.queryContractSmart(this.contractAddress, {
      nft_info: {
        token_id: tokenId,
      },
    });
  };
  getNftByExtension = async ({
    extension,
    limit,
    startAfter,
  }: {
    extension?: Empty;
    limit?: number;
    startAfter?: string;
  }): Promise<NullableNftInfoResponseForNullable_Empty> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_nft_by_extension: {
        extension,
        limit,
        start_after: startAfter,
      },
    });
  };
  allNftInfo = async ({
    includeExpired,
    tokenId,
  }: {
    includeExpired?: boolean;
    tokenId: string;
  }): Promise<AllNftInfoResponseForNullable_Empty> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_nft_info: {
        include_expired: includeExpired,
        token_id: tokenId,
      },
    });
  };
  tokens = async ({
    limit,
    owner,
    startAfter,
  }: {
    limit?: number;
    owner: string;
    startAfter?: string;
  }): Promise<TokensResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      tokens: {
        limit,
        owner,
        start_after: startAfter,
      },
    });
  };
  allTokens = async ({
    limit,
    startAfter,
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<TokensResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_tokens: {
        limit,
        start_after: startAfter,
      },
    });
  };
  extension = async ({ msg }: { msg: Empty }): Promise<Null> => {
    return this.client.queryContractSmart(this.contractAddress, {
      extension: {
        msg,
      },
    });
  };
  getCollectionExtension = async ({
    msg,
  }: {
    msg?: CollectionExtensionForRoyaltyInfo;
  }): Promise<Null> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_collection_extension: {
        msg,
      },
    });
  };
  getWithdrawAddress = async (): Promise<NullableString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_withdraw_address: {},
    });
  };
}
export interface Cw721baseInterface extends Cw721baseReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateOwnership: (
    action: Action,
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>;
  updateMinterOwnership: (
    action: Action,
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>;
  updateCreatorOwnership: (
    action: Action,
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>;
  updateCollectionInfo: (
    {
      collectionInfo,
    }: {
      collectionInfo: CollectionInfoMsgForNullable_CollectionExtensionMsgForRoyaltyInfoResponse;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>;
  transferNft: (
    {
      recipient,
      tokenId,
    }: {
      recipient: string;
      tokenId: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>;
  sendNft: (
    {
      contract,
      msg,
      tokenId,
    }: {
      contract: string;
      msg: Binary;
      tokenId: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>;
  approve: (
    {
      expires,
      spender,
      tokenId,
    }: {
      expires?: Expiration;
      spender: string;
      tokenId: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>;
  revoke: (
    {
      spender,
      tokenId,
    }: {
      spender: string;
      tokenId: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>;
  approveAll: (
    {
      expires,
      operator,
    }: {
      expires?: Expiration;
      operator: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>;
  revokeAll: (
    {
      operator,
    }: {
      operator: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>;
  mint: (
    {
      extension,
      owner,
      tokenId,
      tokenUri,
    }: {
      extension?: Empty;
      owner: string;
      tokenId: string;
      tokenUri?: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>;
  burn: (
    {
      tokenId,
    }: {
      tokenId: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>;
  updateExtension: (
    {
      msg,
    }: {
      msg: Empty;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>;
  updateNftInfo: (
    {
      extension,
      tokenId,
      tokenUri,
    }: {
      extension?: Empty;
      tokenId: string;
      tokenUri?: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>;
  setWithdrawAddress: (
    {
      address,
    }: {
      address: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>;
  removeWithdrawAddress: (
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>;
  withdrawFunds: (
    {
      amount,
    }: {
      amount: Coin;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>;
}
export class Cw721baseClient
  extends Cw721baseQueryClient
  implements Cw721baseInterface
{
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(
    client: SigningCosmWasmClient,
    sender: string,
    contractAddress: string,
  ) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateOwnership = this.updateOwnership.bind(this);
    this.updateMinterOwnership = this.updateMinterOwnership.bind(this);
    this.updateCreatorOwnership = this.updateCreatorOwnership.bind(this);
    this.updateCollectionInfo = this.updateCollectionInfo.bind(this);
    this.transferNft = this.transferNft.bind(this);
    this.sendNft = this.sendNft.bind(this);
    this.approve = this.approve.bind(this);
    this.revoke = this.revoke.bind(this);
    this.approveAll = this.approveAll.bind(this);
    this.revokeAll = this.revokeAll.bind(this);
    this.mint = this.mint.bind(this);
    this.burn = this.burn.bind(this);
    this.updateExtension = this.updateExtension.bind(this);
    this.updateNftInfo = this.updateNftInfo.bind(this);
    this.setWithdrawAddress = this.setWithdrawAddress.bind(this);
    this.removeWithdrawAddress = this.removeWithdrawAddress.bind(this);
    this.withdrawFunds = this.withdrawFunds.bind(this);
  }
  updateOwnership = async (
    action: Action,
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_ownership: action,
      },
      fee,
      memo,
      _funds,
    );
  };
  updateMinterOwnership = async (
    action: Action,
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_minter_ownership: action,
      },
      fee,
      memo,
      _funds,
    );
  };
  updateCreatorOwnership = async (
    action: Action,
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_creator_ownership: action,
      },
      fee,
      memo,
      _funds,
    );
  };
  updateCollectionInfo = async (
    {
      collectionInfo,
    }: {
      collectionInfo: CollectionInfoMsgForNullable_CollectionExtensionMsgForRoyaltyInfoResponse;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_collection_info: {
          collection_info: collectionInfo,
        },
      },
      fee,
      memo,
      _funds,
    );
  };
  transferNft = async (
    {
      recipient,
      tokenId,
    }: {
      recipient: string;
      tokenId: string;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        transfer_nft: {
          recipient,
          token_id: tokenId,
        },
      },
      fee,
      memo,
      _funds,
    );
  };
  sendNft = async (
    {
      contract,
      msg,
      tokenId,
    }: {
      contract: string;
      msg: Binary;
      tokenId: string;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        send_nft: {
          contract,
          msg,
          token_id: tokenId,
        },
      },
      fee,
      memo,
      _funds,
    );
  };
  approve = async (
    {
      expires,
      spender,
      tokenId,
    }: {
      expires?: Expiration;
      spender: string;
      tokenId: string;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        approve: {
          expires,
          spender,
          token_id: tokenId,
        },
      },
      fee,
      memo,
      _funds,
    );
  };
  revoke = async (
    {
      spender,
      tokenId,
    }: {
      spender: string;
      tokenId: string;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        revoke: {
          spender,
          token_id: tokenId,
        },
      },
      fee,
      memo,
      _funds,
    );
  };
  approveAll = async (
    {
      expires,
      operator,
    }: {
      expires?: Expiration;
      operator: string;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        approve_all: {
          expires,
          operator,
        },
      },
      fee,
      memo,
      _funds,
    );
  };
  revokeAll = async (
    {
      operator,
    }: {
      operator: string;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        revoke_all: {
          operator,
        },
      },
      fee,
      memo,
      _funds,
    );
  };
  mint = async (
    {
      extension,
      owner,
      tokenId,
      tokenUri,
    }: {
      extension?: Empty;
      owner: string;
      tokenId: string;
      tokenUri?: string;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        mint: {
          extension,
          owner,
          token_id: tokenId,
          token_uri: tokenUri,
        },
      },
      fee,
      memo,
      _funds,
    );
  };
  burn = async (
    {
      tokenId,
    }: {
      tokenId: string;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        burn: {
          token_id: tokenId,
        },
      },
      fee,
      memo,
      _funds,
    );
  };
  updateExtension = async (
    {
      msg,
    }: {
      msg: Empty;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_extension: {
          msg,
        },
      },
      fee,
      memo,
      _funds,
    );
  };
  updateNftInfo = async (
    {
      extension,
      tokenId,
      tokenUri,
    }: {
      extension?: Empty;
      tokenId: string;
      tokenUri?: string;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_nft_info: {
          extension,
          token_id: tokenId,
          token_uri: tokenUri,
        },
      },
      fee,
      memo,
      _funds,
    );
  };
  setWithdrawAddress = async (
    {
      address,
    }: {
      address: string;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        set_withdraw_address: {
          address,
        },
      },
      fee,
      memo,
      _funds,
    );
  };
  removeWithdrawAddress = async (
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        remove_withdraw_address: {},
      },
      fee,
      memo,
      _funds,
    );
  };
  withdrawFunds = async (
    {
      amount,
    }: {
      amount: Coin;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        withdraw_funds: {
          amount,
        },
      },
      fee,
      memo,
      _funds,
    );
  };
}
