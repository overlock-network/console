/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
/* eslint-disable */
export type Decimal = string;
export type Timestamp = Uint64;
export type Uint64 = string;
export interface InstantiateMsg {
  collection_info_extension?: CollectionExtensionMsgForRoyaltyInfoResponse | null;
  creator?: string | null;
  minter?: string | null;
  name: string;
  symbol: string;
  withdraw_address?: string | null;
}
export interface CollectionExtensionMsgForRoyaltyInfoResponse {
  description?: string | null;
  explicit_content?: boolean | null;
  external_link?: string | null;
  image?: string | null;
  royalty_info?: RoyaltyInfoResponse | null;
  start_trading_time?: Timestamp | null;
}
export interface RoyaltyInfoResponse {
  payment_address: string;
  share: Decimal;
}
export type ExecuteMsg =
  | {
      update_ownership: Action;
    }
  | {
      update_minter_ownership: Action;
    }
  | {
      update_creator_ownership: Action;
    }
  | {
      update_collection_info: {
        collection_info: CollectionInfoMsgForNullable_CollectionExtensionMsgForRoyaltyInfoResponse;
      };
    }
  | {
      transfer_nft: {
        recipient: string;
        token_id: string;
      };
    }
  | {
      send_nft: {
        contract: string;
        msg: Binary;
        token_id: string;
      };
    }
  | {
      approve: {
        expires?: Expiration | null;
        spender: string;
        token_id: string;
      };
    }
  | {
      revoke: {
        spender: string;
        token_id: string;
      };
    }
  | {
      approve_all: {
        expires?: Expiration | null;
        operator: string;
      };
    }
  | {
      revoke_all: {
        operator: string;
      };
    }
  | {
      mint: {
        extension?: Empty | null;
        owner: string;
        token_id: string;
        token_uri?: string | null;
      };
    }
  | {
      burn: {
        token_id: string;
      };
    }
  | {
      update_extension: {
        msg: Empty;
      };
    }
  | {
      update_nft_info: {
        extension?: Empty | null;
        token_id: string;
        token_uri?: string | null;
      };
    }
  | {
      set_withdraw_address: {
        address: string;
      };
    }
  | {
      remove_withdraw_address: {};
    }
  | {
      withdraw_funds: {
        amount: Coin;
      };
    };
export type Action =
  | {
      transfer_ownership: {
        expiry?: Expiration | null;
        new_owner: string;
      };
    }
  | "accept_ownership"
  | "renounce_ownership";
export type Expiration =
  | {
      at_height: number;
    }
  | {
      at_time: Timestamp;
    }
  | {
      never: {};
    };
export type Binary = string;
export type Uint128 = string;
export interface CollectionInfoMsgForNullable_CollectionExtensionMsgForRoyaltyInfoResponse {
  extension?: CollectionExtensionMsgForRoyaltyInfoResponse | null;
  name?: string | null;
  symbol?: string | null;
}
export interface Empty {}
export interface Coin {
  amount: Uint128;
  denom: string;
}
export type QueryMsg =
  | {
      owner_of: {
        include_expired?: boolean | null;
        token_id: string;
      };
    }
  | {
      approval: {
        include_expired?: boolean | null;
        spender: string;
        token_id: string;
      };
    }
  | {
      approvals: {
        include_expired?: boolean | null;
        token_id: string;
      };
    }
  | {
      operator: {
        include_expired?: boolean | null;
        operator: string;
        owner: string;
      };
    }
  | {
      all_operators: {
        include_expired?: boolean | null;
        limit?: number | null;
        owner: string;
        start_after?: string | null;
      };
    }
  | {
      num_tokens: {};
    }
  | {
      contract_info: {};
    }
  | {
      get_config: {};
    }
  | {
      get_collection_info_and_extension: {};
    }
  | {
      get_all_info: {};
    }
  | {
      get_collection_extension_attributes: {};
    }
  | {
      ownership: {};
    }
  | {
      minter: {};
    }
  | {
      get_minter_ownership: {};
    }
  | {
      get_creator_ownership: {};
    }
  | {
      nft_info: {
        token_id: string;
      };
    }
  | {
      get_nft_by_extension: {
        extension?: Empty | null;
        limit?: number | null;
        start_after?: string | null;
      };
    }
  | {
      all_nft_info: {
        include_expired?: boolean | null;
        token_id: string;
      };
    }
  | {
      tokens: {
        limit?: number | null;
        owner: string;
        start_after?: string | null;
      };
    }
  | {
      all_tokens: {
        limit?: number | null;
        start_after?: string | null;
      };
    }
  | {
      extension: {
        msg: Empty;
      };
    }
  | {
      get_collection_extension: {
        msg?: CollectionExtensionForRoyaltyInfo | null;
      };
    }
  | {
      get_withdraw_address: {};
    };
export type Addr = string;
export interface CollectionExtensionForRoyaltyInfo {
  description: string;
  explicit_content?: boolean | null;
  external_link?: string | null;
  image: string;
  royalty_info?: RoyaltyInfo | null;
  start_trading_time?: Timestamp | null;
}
export interface RoyaltyInfo {
  payment_address: Addr;
  share: Decimal;
}
export type MigrateMsg = {
  with_update: {
    creator?: string | null;
    minter?: string | null;
  };
};
export interface AllNftInfoResponseForNullable_Empty {
  access: OwnerOfResponse;
  info: NftInfoResponseForNullable_Empty;
}
export interface OwnerOfResponse {
  approvals: Approval[];
  owner: string;
}
export interface Approval {
  expires: Expiration;
  spender: Addr;
}
export interface NftInfoResponseForNullable_Empty {
  extension?: Empty | null;
  token_uri?: string | null;
}
export interface OperatorsResponse {
  operators: Approval[];
}
export interface TokensResponse {
  tokens: string[];
}
export interface ApprovalResponse {
  approval: Approval;
}
export interface ApprovalsResponse {
  approvals: Approval[];
}
export interface CollectionInfoAndExtensionResponseForNullable_CollectionExtensionForRoyaltyInfo {
  extension?: CollectionExtensionForRoyaltyInfo | null;
  name: string;
  symbol: string;
  updated_at: Timestamp;
}
export type Null = null;
export interface AllInfoResponse {
  collection_extension: Attribute[];
  collection_info: CollectionInfo;
  contract_info: ContractInfoResponse;
  num_tokens: number;
}
export interface Attribute {
  key: string;
  value: Binary;
}
export interface CollectionInfo {
  name: string;
  symbol: string;
  updated_at: Timestamp;
}
export interface ContractInfoResponse {
  admin?: Addr | null;
  code_id: number;
  creator: Addr;
  ibc_port?: string | null;
  pinned: boolean;
}
export type ArrayOfAttribute = Attribute[];
export interface ConfigResponseForNullable_CollectionExtensionForRoyaltyInfo {
  collection_extension?: CollectionExtensionForRoyaltyInfo | null;
  collection_info: CollectionInfo;
  contract_info: ContractInfoResponse;
  creator_ownership: OwnershipForAddr;
  minter_ownership: OwnershipForAddr;
  num_tokens: number;
  withdraw_address?: string | null;
}
export interface OwnershipForAddr {
  owner?: Addr | null;
  pending_expiry?: Expiration | null;
  pending_owner?: Addr | null;
}
export type NullableNftInfoResponseForNullable_Empty =
  NftInfoResponseForNullable_Empty | null;
export type NullableString = string | null;
export interface MinterResponse {
  minter?: string | null;
}
export interface NumTokensResponse {
  count: number;
}
export interface OperatorResponse {
  approval: Approval;
}
